package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _template_doc_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x31\x4f\x03\x31\x0c\x85\xf7\xfe\x8a\x37\xb0\x5e\xa2\x63\x04\xb1\x81\x58\x80\x2e\x30\x30\xba\x39\x37\xb1\xda\xc4\x51\xe2\xa3\x7f\x1f\x45\xba\x43\x78\xb4\x3e\xbf\xf7\xb9\x52\xb8\x50\x64\xfc\x70\xeb\xa2\xe5\xe0\x3d\x3e\x93\x74\x48\x07\x21\x6a\xcb\xc8\x12\x1b\x99\x68\x81\xa9\x5e\x0f\xde\x0f\x66\x76\xdf\xba\x22\x50\x41\x68\x4c\xc6\x28\x7c\xdb\x48\x1e\xe8\x4d\x2c\xe1\x44\x3d\xe1\x61\xe0\x63\x5e\x8f\xf3\x3c\xbf\x1f\x9f\xbf\xde\x5e\x9e\xf4\x7c\x7e\x44\x54\x44\x36\x44\xb1\xb4\x9e\x5c\xd0\xec\x8b\x16\xb6\xc4\x57\xee\xdd\x8f\xee\x69\x4b\xf4\xce\xb9\x3d\xe6\xff\x7e\x6f\xc4\xb4\xe0\x6e\x91\x86\xa9\xa2\x52\xa0\x4b\xe4\x0f\xca\xbc\xb9\xde\xff\xb9\x4a\xae\xda\x0c\x36\x1e\xdc\x38\x98\xa2\xad\x05\x6b\x8d\x8d\x96\x71\xf2\x1b\x00\x00\xff\xff\x82\x7f\x19\x9f\x12\x01\x00\x00")

func template_doc_gotmpl() ([]byte, error) {
	return bindata_read(
		_template_doc_gotmpl,
		"template/doc.gotmpl",
	)
}

var _template_init_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xc1\xaa\xd4\x40\x10\x3c\x4f\x7f\x45\x33\xa7\x44\xf6\x25\x77\x65\x0f\xbe\x27\x82\xe0\x5b\xde\x41\xbc\x88\xc8\x6c\xb6\x37\x19\x93\xf4\x84\x9e\x89\x8a\x61\xfe\x5d\x66\x92\x2c\x8b\x78\x10\x72\xc8\x54\x57\x17\x55\xd5\x93\x69\x7a\xd3\x12\xfe\x20\xf1\xd6\x31\x80\x1d\x27\x27\x01\x0b\x50\xba\x71\x1c\x8c\x65\x92\x7a\xb0\x3e\x68\x50\xba\xb5\xa1\x9b\xcf\x55\xe3\xc6\xfa\xbb\xe5\xdf\xdd\x5c\xb7\x4e\x46\x0d\xca\x4c\x16\xef\xa7\xec\x98\x42\x47\x03\x79\x9f\x29\x0f\xa3\x6d\xc5\x04\xaa\xa7\xbe\xd5\xa0\x46\xdb\xfe\x37\xbd\xde\xfe\x35\xa8\xc9\x88\x19\x51\x2f\x4b\xf5\xb2\xda\x3e\x99\x91\x62\xac\x33\xae\x41\x2d\xcb\x03\x8a\xe1\x96\xb0\xfa\xbc\xe6\xf9\x44\xe3\xe4\x63\x04\xf5\xed\x1f\x6b\xcb\xb2\xd3\x62\xdc\xb6\x89\x2f\x18\x23\x94\x00\xd7\x99\x1b\x7c\x12\x32\x81\x9e\xb3\x01\xeb\xb8\xb8\x9c\xf1\x55\xf2\x57\xbd\x7b\x2c\xb1\x30\x93\xad\xd6\x19\x3d\x39\x0e\xe2\x86\x81\xe4\x80\x24\xe2\xa4\x5c\x72\xca\x8f\xd6\x07\x7c\x7d\xc4\x54\x60\x75\xa2\x9f\x45\x79\x83\xab\x97\xd9\x77\xef\xc5\x71\x28\xd8\x0e\x7f\xe1\x8f\xa6\xe9\x37\xb8\x23\x73\x49\x12\xfb\x78\x5d\x29\x41\x6d\x27\x4b\x33\xad\x41\x5d\x9d\x2c\xa0\x94\xbd\x26\xe6\xc1\xf5\x09\xcf\xc5\xec\x1e\x9f\xcd\xf4\x65\xdb\xf9\xfa\xc6\xf5\x89\x7c\xd3\xc8\xf2\x7b\x1b\x49\x5c\xdd\xec\x7c\x60\x4f\x12\xde\x5e\x03\x49\x91\x94\x31\x19\xca\x8c\xec\xec\x98\xdf\xd5\x89\x7e\x65\x53\x2a\x22\x0d\x9e\x30\xab\x9f\x85\x4c\x9f\x30\x48\xdf\x76\xc7\x5c\xd0\x9a\x27\x35\x72\x5f\xee\x61\x0f\x59\x42\xca\x41\x22\x78\x3c\x22\xdb\x21\xa9\x09\x85\x59\x38\xbd\xf0\x40\x22\x59\x72\xc3\x6e\xca\x6c\x07\x80\xf8\x27\x00\x00\xff\xff\x02\xe8\xb0\xcf\xd4\x02\x00\x00")

func template_init_gotmpl() ([]byte, error) {
	return bindata_read(
		_template_init_gotmpl,
		"template/init.gotmpl",
	)
}

var _template_param_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xcd\x6a\x1b\x41\x10\x84\xcf\xd3\x4f\xd1\xcc\x69\x16\x92\xdd\x7b\x84\x6e\x49\x20\x10\x91\x60\x8c\x2f\x42\x98\xf6\xaa\x77\xb6\x59\xcd\x0f\x3d\x23\x81\x31\x7a\x77\x33\x96\x0c\x3a\x18\xfb\xda\xd5\x55\xf5\x55\xa6\x71\x21\xcf\x98\x49\x29\x00\x48\xc8\x49\x2b\x3a\x40\x44\xb4\x53\xa8\x16\x0c\x65\x41\xeb\xa5\xce\xc7\xa7\x7e\x4c\x61\x88\x29\x72\x9d\xf9\xc0\xa5\x0c\x3e\x69\xf8\x1e\xc4\x2b\x55\x1e\xf2\xe2\x2d\x18\x5b\x9e\xe3\x68\xa1\x03\x38\x91\xe2\xe6\xa2\x6d\x28\x63\xa0\xbc\x2d\x55\x25\xfa\x1d\x65\xe9\xaf\xca\x9f\x58\x59\x27\x1a\x79\x75\x31\x48\x94\xfa\xfb\x40\x1e\x5b\x4c\xff\x2f\x8e\x0c\x30\x1d\xe3\x88\x77\xec\xa5\x54\x56\x17\xc4\xe3\x47\x01\x1d\xbe\x80\x79\xb7\xf7\x3f\x93\x6b\x36\xf7\x76\x35\x37\x18\x6b\x0c\xb4\xb0\xfb\x82\xa6\x03\x73\xee\xc0\x0c\x03\xed\xf7\xd8\x1a\x6b\xc2\xeb\xce\xbf\x52\x2a\x18\x99\xf0\xf1\x1b\xa6\x05\x7f\xac\x6f\x46\x6e\x83\xf8\xfe\xbf\xf2\x03\x6b\x91\x14\x5d\xb7\x5b\xb5\x9f\x86\x30\x0c\xc8\xaa\x49\x71\x4a\x8a\x52\xc1\x98\x4c\x51\x46\x37\x85\xda\xff\x6a\xc2\xe4\xec\xfd\xcc\xca\x28\x05\x4b\x0a\x8c\xa7\x4b\x08\xce\x54\xb0\x50\x60\xcc\xca\xd7\x9b\xed\x1a\x20\x98\xcf\x9a\xdb\x52\xf1\x00\x67\x78\x0d\x00\x00\xff\xff\x6e\x79\x4c\xd2\xe5\x01\x00\x00")

func template_param_gotmpl() ([]byte, error) {
	return bindata_read(
		_template_param_gotmpl,
		"template/param.gotmpl",
	)
}

var _template_temp_gotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x3f\x6f\xe3\x30\x0c\xc5\x67\xf3\x53\x10\x9e\xec\x43\xce\xda\x0f\xc8\x12\x64\xb9\xe1\x92\xe0\x50\x74\x57\x64\x46\x51\x6d\xfd\x29\x2d\xb5\x40\x0d\x7f\xf7\xc2\x8e\x9d\xa4\x45\x87\x6c\xa6\xc9\xf7\xf8\xd3\x63\x90\xaa\x91\x9a\xd0\x1a\xcd\x32\x12\x80\xb1\xc1\x73\xc4\x02\xb2\x5c\x9b\x78\x4e\xc7\x4a\x79\x2b\x5e\x8c\xfb\x38\x27\xa1\x3d\xdb\x1c\xb2\x20\x59\x5a\xcc\xfb\x1e\xab\xc3\x45\xbf\x93\x96\x70\x18\xc4\xd4\xc9\x21\x93\xc1\xe0\xbd\xde\x79\x47\xf1\x4c\x2d\x75\xdd\x64\xf2\x7b\xde\x27\x42\xa3\x73\xc8\xac\xd1\x0f\x8f\x8b\xf9\x3b\x87\x12\x40\x79\xd7\x4d\xb0\x6f\xc4\x9d\xf1\x0e\xd7\x17\xac\xe7\xb9\x1c\x86\x11\x97\xe9\x5b\xfb\xc0\x74\x3f\x51\x02\x9c\x92\x53\xc8\xc9\x15\xf5\x11\x7f\x8d\x2b\xab\xed\xa6\x44\x62\xf6\x8c\x3d\x64\x42\x3c\xed\xb7\x7b\x94\x75\x8d\x8b\x55\x0a\xb5\x8c\x84\xdd\x6b\x0b\x19\x53\x4c\xec\xd0\x99\x16\x86\xc5\xcb\xb7\xed\x46\xaa\xe6\x71\xc3\x51\x71\x94\xaa\xc1\x51\x1f\x8d\x77\x3f\xfa\xee\xe8\xfd\xdf\x25\x80\xa2\x44\x19\x4c\x35\x57\x7f\x5d\x24\x3e\x49\x45\xfd\x14\xe7\xf8\x6b\x79\xe2\x9f\xf5\x78\xde\xea\xa6\x9c\x1b\xc5\xbc\x79\x75\x0b\x68\xc5\xc9\xad\x16\xf4\xf2\x0a\xf0\xd5\xf0\xca\x62\x9c\x89\x45\xd9\x03\x22\xe2\x74\xf9\xea\x3f\x69\xd3\x45\xe2\xe2\x1e\xb3\x84\x01\x3e\x03\x00\x00\xff\xff\xb7\xeb\xde\xfe\x68\x02\x00\x00")

func template_temp_gotmpl() ([]byte, error) {
	return bindata_read(
		_template_temp_gotmpl,
		"template/temp.gotmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"template/doc.gotmpl": template_doc_gotmpl,
	"template/init.gotmpl": template_init_gotmpl,
	"template/param.gotmpl": template_param_gotmpl,
	"template/temp.gotmpl": template_temp_gotmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"template": &_bintree_t{nil, map[string]*_bintree_t{
		"doc.gotmpl": &_bintree_t{template_doc_gotmpl, map[string]*_bintree_t{
		}},
		"init.gotmpl": &_bintree_t{template_init_gotmpl, map[string]*_bintree_t{
		}},
		"param.gotmpl": &_bintree_t{template_param_gotmpl, map[string]*_bintree_t{
		}},
		"temp.gotmpl": &_bintree_t{template_temp_gotmpl, map[string]*_bintree_t{
		}},
	}},
}}
